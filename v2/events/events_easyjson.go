// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events(in *jlexer.Lexer, out *EventStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CurrentPacket":
			easyjson692db02bDecode(in, &out.CurrentPacket)
		case "CurrentQQ":
			out.CurrentQQ = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events(out *jwriter.Writer, in EventStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CurrentPacket\":"
		out.RawString(prefix[1:])
		easyjson692db02bEncode(out, in.CurrentPacket)
	}
	{
		const prefix string = ",\"CurrentQQ\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurrentQQ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events(l, v)
}
func easyjson692db02bDecode(in *jlexer.Lexer, out *struct {
	EventData struct {
		Nick    *string `json:"Nick,omitempty"`
		Uin     *int64  `json:"Uin,omitempty"`
		Content *string `json:"Content,omitempty"`
		MsgHead *struct {
			FromUin            int64       `json:"FromUin"`
			ToUin              int64       `json:"ToUin"`
			FromType           int         `json:"FromType"`
			SenderUin          int64       `json:"SenderUin"`
			SenderNick         string      `json:"SenderNick"`
			MsgType            int         `json:"MsgType"`
			C2CCmd             int         `json:"C2cCmd"`
			MsgSeq             int64       `json:"MsgSeq"`
			MsgTime            int64       `json:"MsgTime"`
			MsgRandom          int64       `json:"MsgRandom"`
			MsgUid             int64       `json:"MsgUid"`
			GroupInfo          GroupInfo   `json:"GroupInfo"`
			C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
		} `json:"MsgHead,omitempty"`
		MsgBody *struct {
			SubMsgType int    `json:"SubMsgType"`
			Content    string `json:"Content"`
			Images     []struct {
				FileId   int64  `json:"FileId"`
				FileMd5  string `json:"FileMd5"`
				FileSize int    `json:"FileSize"`
				Url      string `json:"Url"`
			} `json:"Images"`
			AtUinLists []UserInfo  `json:"AtUinLists"`
			Video      interface{} `json:"Video"`
			Voice      interface{} `json:"Voice"`
		} `json:"MsgBody,omitempty"`
		Event *struct {
			Invitee string `json:"Invitee"`
			Invitor string `json:"Invitor"`
			Tips    string `json:"Tips"`
		} `json:"Event,omitempty"`
	} `json:"EventData"`
	EventName string `json:"EventName"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EventData":
			easyjson692db02bDecode1(in, &out.EventData)
		case "EventName":
			out.EventName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode(out *jwriter.Writer, in struct {
	EventData struct {
		Nick    *string `json:"Nick,omitempty"`
		Uin     *int64  `json:"Uin,omitempty"`
		Content *string `json:"Content,omitempty"`
		MsgHead *struct {
			FromUin            int64       `json:"FromUin"`
			ToUin              int64       `json:"ToUin"`
			FromType           int         `json:"FromType"`
			SenderUin          int64       `json:"SenderUin"`
			SenderNick         string      `json:"SenderNick"`
			MsgType            int         `json:"MsgType"`
			C2CCmd             int         `json:"C2cCmd"`
			MsgSeq             int64       `json:"MsgSeq"`
			MsgTime            int64       `json:"MsgTime"`
			MsgRandom          int64       `json:"MsgRandom"`
			MsgUid             int64       `json:"MsgUid"`
			GroupInfo          GroupInfo   `json:"GroupInfo"`
			C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
		} `json:"MsgHead,omitempty"`
		MsgBody *struct {
			SubMsgType int    `json:"SubMsgType"`
			Content    string `json:"Content"`
			Images     []struct {
				FileId   int64  `json:"FileId"`
				FileMd5  string `json:"FileMd5"`
				FileSize int    `json:"FileSize"`
				Url      string `json:"Url"`
			} `json:"Images"`
			AtUinLists []UserInfo  `json:"AtUinLists"`
			Video      interface{} `json:"Video"`
			Voice      interface{} `json:"Voice"`
		} `json:"MsgBody,omitempty"`
		Event *struct {
			Invitee string `json:"Invitee"`
			Invitor string `json:"Invitor"`
			Tips    string `json:"Tips"`
		} `json:"Event,omitempty"`
	} `json:"EventData"`
	EventName string `json:"EventName"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"EventData\":"
		out.RawString(prefix[1:])
		easyjson692db02bEncode1(out, in.EventData)
	}
	{
		const prefix string = ",\"EventName\":"
		out.RawString(prefix)
		out.String(string(in.EventName))
	}
	out.RawByte('}')
}
func easyjson692db02bDecode1(in *jlexer.Lexer, out *struct {
	Nick    *string `json:"Nick,omitempty"`
	Uin     *int64  `json:"Uin,omitempty"`
	Content *string `json:"Content,omitempty"`
	MsgHead *struct {
		FromUin            int64       `json:"FromUin"`
		ToUin              int64       `json:"ToUin"`
		FromType           int         `json:"FromType"`
		SenderUin          int64       `json:"SenderUin"`
		SenderNick         string      `json:"SenderNick"`
		MsgType            int         `json:"MsgType"`
		C2CCmd             int         `json:"C2cCmd"`
		MsgSeq             int64       `json:"MsgSeq"`
		MsgTime            int64       `json:"MsgTime"`
		MsgRandom          int64       `json:"MsgRandom"`
		MsgUid             int64       `json:"MsgUid"`
		GroupInfo          GroupInfo   `json:"GroupInfo"`
		C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
	} `json:"MsgHead,omitempty"`
	MsgBody *struct {
		SubMsgType int    `json:"SubMsgType"`
		Content    string `json:"Content"`
		Images     []struct {
			FileId   int64  `json:"FileId"`
			FileMd5  string `json:"FileMd5"`
			FileSize int    `json:"FileSize"`
			Url      string `json:"Url"`
		} `json:"Images"`
		AtUinLists []UserInfo  `json:"AtUinLists"`
		Video      interface{} `json:"Video"`
		Voice      interface{} `json:"Voice"`
	} `json:"MsgBody,omitempty"`
	Event *struct {
		Invitee string `json:"Invitee"`
		Invitor string `json:"Invitor"`
		Tips    string `json:"Tips"`
	} `json:"Event,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Nick":
			if in.IsNull() {
				in.Skip()
				out.Nick = nil
			} else {
				if out.Nick == nil {
					out.Nick = new(string)
				}
				*out.Nick = string(in.String())
			}
		case "Uin":
			if in.IsNull() {
				in.Skip()
				out.Uin = nil
			} else {
				if out.Uin == nil {
					out.Uin = new(int64)
				}
				*out.Uin = int64(in.Int64())
			}
		case "Content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(string)
				}
				*out.Content = string(in.String())
			}
		case "MsgHead":
			if in.IsNull() {
				in.Skip()
				out.MsgHead = nil
			} else {
				if out.MsgHead == nil {
					out.MsgHead = new(struct {
						FromUin            int64       `json:"FromUin"`
						ToUin              int64       `json:"ToUin"`
						FromType           int         `json:"FromType"`
						SenderUin          int64       `json:"SenderUin"`
						SenderNick         string      `json:"SenderNick"`
						MsgType            int         `json:"MsgType"`
						C2CCmd             int         `json:"C2cCmd"`
						MsgSeq             int64       `json:"MsgSeq"`
						MsgTime            int64       `json:"MsgTime"`
						MsgRandom          int64       `json:"MsgRandom"`
						MsgUid             int64       `json:"MsgUid"`
						GroupInfo          GroupInfo   `json:"GroupInfo"`
						C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
					})
				}
				easyjson692db02bDecode2(in, out.MsgHead)
			}
		case "MsgBody":
			if in.IsNull() {
				in.Skip()
				out.MsgBody = nil
			} else {
				if out.MsgBody == nil {
					out.MsgBody = new(struct {
						SubMsgType int    `json:"SubMsgType"`
						Content    string `json:"Content"`
						Images     []struct {
							FileId   int64  `json:"FileId"`
							FileMd5  string `json:"FileMd5"`
							FileSize int    `json:"FileSize"`
							Url      string `json:"Url"`
						} `json:"Images"`
						AtUinLists []UserInfo  `json:"AtUinLists"`
						Video      interface{} `json:"Video"`
						Voice      interface{} `json:"Voice"`
					})
				}
				easyjson692db02bDecode3(in, out.MsgBody)
			}
		case "Event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(struct {
						Invitee string `json:"Invitee"`
						Invitor string `json:"Invitor"`
						Tips    string `json:"Tips"`
					})
				}
				easyjson692db02bDecode4(in, out.Event)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode1(out *jwriter.Writer, in struct {
	Nick    *string `json:"Nick,omitempty"`
	Uin     *int64  `json:"Uin,omitempty"`
	Content *string `json:"Content,omitempty"`
	MsgHead *struct {
		FromUin            int64       `json:"FromUin"`
		ToUin              int64       `json:"ToUin"`
		FromType           int         `json:"FromType"`
		SenderUin          int64       `json:"SenderUin"`
		SenderNick         string      `json:"SenderNick"`
		MsgType            int         `json:"MsgType"`
		C2CCmd             int         `json:"C2cCmd"`
		MsgSeq             int64       `json:"MsgSeq"`
		MsgTime            int64       `json:"MsgTime"`
		MsgRandom          int64       `json:"MsgRandom"`
		MsgUid             int64       `json:"MsgUid"`
		GroupInfo          GroupInfo   `json:"GroupInfo"`
		C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
	} `json:"MsgHead,omitempty"`
	MsgBody *struct {
		SubMsgType int    `json:"SubMsgType"`
		Content    string `json:"Content"`
		Images     []struct {
			FileId   int64  `json:"FileId"`
			FileMd5  string `json:"FileMd5"`
			FileSize int    `json:"FileSize"`
			Url      string `json:"Url"`
		} `json:"Images"`
		AtUinLists []UserInfo  `json:"AtUinLists"`
		Video      interface{} `json:"Video"`
		Voice      interface{} `json:"Voice"`
	} `json:"MsgBody,omitempty"`
	Event *struct {
		Invitee string `json:"Invitee"`
		Invitor string `json:"Invitor"`
		Tips    string `json:"Tips"`
	} `json:"Event,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Nick != nil {
		const prefix string = ",\"Nick\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Nick))
	}
	if in.Uin != nil {
		const prefix string = ",\"Uin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Uin))
	}
	if in.Content != nil {
		const prefix string = ",\"Content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Content))
	}
	if in.MsgHead != nil {
		const prefix string = ",\"MsgHead\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncode2(out, *in.MsgHead)
	}
	if in.MsgBody != nil {
		const prefix string = ",\"MsgBody\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncode3(out, *in.MsgBody)
	}
	if in.Event != nil {
		const prefix string = ",\"Event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson692db02bEncode4(out, *in.Event)
	}
	out.RawByte('}')
}
func easyjson692db02bDecode4(in *jlexer.Lexer, out *struct {
	Invitee string `json:"Invitee"`
	Invitor string `json:"Invitor"`
	Tips    string `json:"Tips"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Invitee":
			out.Invitee = string(in.String())
		case "Invitor":
			out.Invitor = string(in.String())
		case "Tips":
			out.Tips = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode4(out *jwriter.Writer, in struct {
	Invitee string `json:"Invitee"`
	Invitor string `json:"Invitor"`
	Tips    string `json:"Tips"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Invitee\":"
		out.RawString(prefix[1:])
		out.String(string(in.Invitee))
	}
	{
		const prefix string = ",\"Invitor\":"
		out.RawString(prefix)
		out.String(string(in.Invitor))
	}
	{
		const prefix string = ",\"Tips\":"
		out.RawString(prefix)
		out.String(string(in.Tips))
	}
	out.RawByte('}')
}
func easyjson692db02bDecode3(in *jlexer.Lexer, out *struct {
	SubMsgType int    `json:"SubMsgType"`
	Content    string `json:"Content"`
	Images     []struct {
		FileId   int64  `json:"FileId"`
		FileMd5  string `json:"FileMd5"`
		FileSize int    `json:"FileSize"`
		Url      string `json:"Url"`
	} `json:"Images"`
	AtUinLists []UserInfo  `json:"AtUinLists"`
	Video      interface{} `json:"Video"`
	Voice      interface{} `json:"Voice"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SubMsgType":
			out.SubMsgType = int(in.Int())
		case "Content":
			out.Content = string(in.String())
		case "Images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]struct {
							FileId   int64  `json:"FileId"`
							FileMd5  string `json:"FileMd5"`
							FileSize int    `json:"FileSize"`
							Url      string `json:"Url"`
						}, 0, 1)
					} else {
						out.Images = []struct {
							FileId   int64  `json:"FileId"`
							FileMd5  string `json:"FileMd5"`
							FileSize int    `json:"FileSize"`
							Url      string `json:"Url"`
						}{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						FileId   int64  `json:"FileId"`
						FileMd5  string `json:"FileMd5"`
						FileSize int    `json:"FileSize"`
						Url      string `json:"Url"`
					}
					easyjson692db02bDecode5(in, &v1)
					out.Images = append(out.Images, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AtUinLists":
			if in.IsNull() {
				in.Skip()
				out.AtUinLists = nil
			} else {
				in.Delim('[')
				if out.AtUinLists == nil {
					if !in.IsDelim(']') {
						out.AtUinLists = make([]UserInfo, 0, 2)
					} else {
						out.AtUinLists = []UserInfo{}
					}
				} else {
					out.AtUinLists = (out.AtUinLists)[:0]
				}
				for !in.IsDelim(']') {
					var v2 UserInfo
					easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events1(in, &v2)
					out.AtUinLists = append(out.AtUinLists, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Video":
			if m, ok := out.Video.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Video.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Video = in.Interface()
			}
		case "Voice":
			if m, ok := out.Voice.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Voice.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Voice = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode3(out *jwriter.Writer, in struct {
	SubMsgType int    `json:"SubMsgType"`
	Content    string `json:"Content"`
	Images     []struct {
		FileId   int64  `json:"FileId"`
		FileMd5  string `json:"FileMd5"`
		FileSize int    `json:"FileSize"`
		Url      string `json:"Url"`
	} `json:"Images"`
	AtUinLists []UserInfo  `json:"AtUinLists"`
	Video      interface{} `json:"Video"`
	Voice      interface{} `json:"Voice"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SubMsgType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SubMsgType))
	}
	{
		const prefix string = ",\"Content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"Images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Images {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson692db02bEncode5(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AtUinLists\":"
		out.RawString(prefix)
		if in.AtUinLists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.AtUinLists {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events1(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Video\":"
		out.RawString(prefix)
		if m, ok := in.Video.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Video.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Video))
		}
	}
	{
		const prefix string = ",\"Voice\":"
		out.RawString(prefix)
		if m, ok := in.Voice.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Voice.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Voice))
		}
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events1(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Nick":
			out.Nick = string(in.String())
		case "Uin":
			out.Uin = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events1(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Nick\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"Uin\":"
		out.RawString(prefix)
		out.Int64(int64(in.Uin))
	}
	out.RawByte('}')
}
func easyjson692db02bDecode5(in *jlexer.Lexer, out *struct {
	FileId   int64  `json:"FileId"`
	FileMd5  string `json:"FileMd5"`
	FileSize int    `json:"FileSize"`
	Url      string `json:"Url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FileId":
			out.FileId = int64(in.Int64())
		case "FileMd5":
			out.FileMd5 = string(in.String())
		case "FileSize":
			out.FileSize = int(in.Int())
		case "Url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode5(out *jwriter.Writer, in struct {
	FileId   int64  `json:"FileId"`
	FileMd5  string `json:"FileMd5"`
	FileSize int    `json:"FileSize"`
	Url      string `json:"Url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FileId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.FileId))
	}
	{
		const prefix string = ",\"FileMd5\":"
		out.RawString(prefix)
		out.String(string(in.FileMd5))
	}
	{
		const prefix string = ",\"FileSize\":"
		out.RawString(prefix)
		out.Int(int(in.FileSize))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}
func easyjson692db02bDecode2(in *jlexer.Lexer, out *struct {
	FromUin            int64       `json:"FromUin"`
	ToUin              int64       `json:"ToUin"`
	FromType           int         `json:"FromType"`
	SenderUin          int64       `json:"SenderUin"`
	SenderNick         string      `json:"SenderNick"`
	MsgType            int         `json:"MsgType"`
	C2CCmd             int         `json:"C2cCmd"`
	MsgSeq             int64       `json:"MsgSeq"`
	MsgTime            int64       `json:"MsgTime"`
	MsgRandom          int64       `json:"MsgRandom"`
	MsgUid             int64       `json:"MsgUid"`
	GroupInfo          GroupInfo   `json:"GroupInfo"`
	C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FromUin":
			out.FromUin = int64(in.Int64())
		case "ToUin":
			out.ToUin = int64(in.Int64())
		case "FromType":
			out.FromType = int(in.Int())
		case "SenderUin":
			out.SenderUin = int64(in.Int64())
		case "SenderNick":
			out.SenderNick = string(in.String())
		case "MsgType":
			out.MsgType = int(in.Int())
		case "C2cCmd":
			out.C2CCmd = int(in.Int())
		case "MsgSeq":
			out.MsgSeq = int64(in.Int64())
		case "MsgTime":
			out.MsgTime = int64(in.Int64())
		case "MsgRandom":
			out.MsgRandom = int64(in.Int64())
		case "MsgUid":
			out.MsgUid = int64(in.Int64())
		case "GroupInfo":
			easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events2(in, &out.GroupInfo)
		case "C2CTempMessageHead":
			if m, ok := out.C2CTempMessageHead.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.C2CTempMessageHead.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.C2CTempMessageHead = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncode2(out *jwriter.Writer, in struct {
	FromUin            int64       `json:"FromUin"`
	ToUin              int64       `json:"ToUin"`
	FromType           int         `json:"FromType"`
	SenderUin          int64       `json:"SenderUin"`
	SenderNick         string      `json:"SenderNick"`
	MsgType            int         `json:"MsgType"`
	C2CCmd             int         `json:"C2cCmd"`
	MsgSeq             int64       `json:"MsgSeq"`
	MsgTime            int64       `json:"MsgTime"`
	MsgRandom          int64       `json:"MsgRandom"`
	MsgUid             int64       `json:"MsgUid"`
	GroupInfo          GroupInfo   `json:"GroupInfo"`
	C2CTempMessageHead interface{} `json:"C2CTempMessageHead"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FromUin\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.FromUin))
	}
	{
		const prefix string = ",\"ToUin\":"
		out.RawString(prefix)
		out.Int64(int64(in.ToUin))
	}
	{
		const prefix string = ",\"FromType\":"
		out.RawString(prefix)
		out.Int(int(in.FromType))
	}
	{
		const prefix string = ",\"SenderUin\":"
		out.RawString(prefix)
		out.Int64(int64(in.SenderUin))
	}
	{
		const prefix string = ",\"SenderNick\":"
		out.RawString(prefix)
		out.String(string(in.SenderNick))
	}
	{
		const prefix string = ",\"MsgType\":"
		out.RawString(prefix)
		out.Int(int(in.MsgType))
	}
	{
		const prefix string = ",\"C2cCmd\":"
		out.RawString(prefix)
		out.Int(int(in.C2CCmd))
	}
	{
		const prefix string = ",\"MsgSeq\":"
		out.RawString(prefix)
		out.Int64(int64(in.MsgSeq))
	}
	{
		const prefix string = ",\"MsgTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.MsgTime))
	}
	{
		const prefix string = ",\"MsgRandom\":"
		out.RawString(prefix)
		out.Int64(int64(in.MsgRandom))
	}
	{
		const prefix string = ",\"MsgUid\":"
		out.RawString(prefix)
		out.Int64(int64(in.MsgUid))
	}
	{
		const prefix string = ",\"GroupInfo\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events2(out, in.GroupInfo)
	}
	{
		const prefix string = ",\"C2CTempMessageHead\":"
		out.RawString(prefix)
		if m, ok := in.C2CTempMessageHead.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.C2CTempMessageHead.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.C2CTempMessageHead))
		}
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComOpqOscOPQBotV2Events2(in *jlexer.Lexer, out *GroupInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GroupCard":
			out.GroupCard = string(in.String())
		case "GroupCode":
			out.GroupCode = int(in.Int())
		case "GroupInfoSeq":
			out.GroupInfoSeq = int(in.Int())
		case "GroupLevel":
			out.GroupLevel = int(in.Int())
		case "GroupRank":
			out.GroupRank = int(in.Int())
		case "GroupType":
			out.GroupType = int(in.Int())
		case "GroupName":
			out.GroupName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComOpqOscOPQBotV2Events2(out *jwriter.Writer, in GroupInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GroupCard\":"
		out.RawString(prefix[1:])
		out.String(string(in.GroupCard))
	}
	{
		const prefix string = ",\"GroupCode\":"
		out.RawString(prefix)
		out.Int(int(in.GroupCode))
	}
	{
		const prefix string = ",\"GroupInfoSeq\":"
		out.RawString(prefix)
		out.Int(int(in.GroupInfoSeq))
	}
	{
		const prefix string = ",\"GroupLevel\":"
		out.RawString(prefix)
		out.Int(int(in.GroupLevel))
	}
	{
		const prefix string = ",\"GroupRank\":"
		out.RawString(prefix)
		out.Int(int(in.GroupRank))
	}
	{
		const prefix string = ",\"GroupType\":"
		out.RawString(prefix)
		out.Int(int(in.GroupType))
	}
	{
		const prefix string = ",\"GroupName\":"
		out.RawString(prefix)
		out.String(string(in.GroupName))
	}
	out.RawByte('}')
}
